name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
      - test-release.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: taiki-e/create-gh-release-action@v1
        with:
          changelog: CHANGELOG.md
          draft: true
          # (required) GitHub token for creating GitHub Releases.
          token: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            os-arch: amd64
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            libpath: usr/lib/x86_64-linux-gnu
            no-default-features: false
          - os: ubuntu-22.04
            os-arch: amd64
            target: x86_64-unknown-linux-musl
            arch: x86_64
            libpath: usr/lib/x86_64-linux-gnu
            no-default-features: false
            features: static,vendored
          - os: ubuntu-22.04
            os-arch: arm64
            target: aarch64-unknown-linux-gnu
            arch: aarch64
            libpath: usr/lib/aarch64-linux-gnu
            no-default-features: false
          - os: ubuntu-22.04
            os-arch: arm64
            target: aarch64-unknown-linux-musl
            arch: aarch64
            libpath: usr/lib/aarch64-linux-gnu
            no-default-features: false
            features: static,vendored
          - os: ubuntu-22.04
            os-arch: riscv64
            target: riscv64gc-unknown-linux-gnu
            arch: riscv64
            libpath: usr/lib/riscv64-linux-gnu
            no-default-features: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-about
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}-${{ matrix.target }}-rust
          cache-targets: true
          cache-on-failure: false
      
      - name: Add apt sources for ${{ matrix.os-arch }}
        if: matrix.os-arch != 'amd64'
        run: |
          dpkg --add-architecture ${{ matrix.os-arch }}

          release=$(. /etc/os-release && echo "$UBUNTU_CODENAME")
          sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
          printf 'deb [arch=${{ matrix.os-arch }}] http://ports.ubuntu.com/ %s main restricted\n' \
              $release $release-updates $release-security \
              >> /etc/apt/sources.list
        shell: sudo sh -e {0}
      - name: Install native dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt update -y
          sudo apt install -y {binutils,gcc}-{aarch64,riscv64}-linux-gnu \
            build-essential autopoint gettext libelf-dev zlib1g-dev \
            libelf-dev:${{ matrix.os-arch }} zlib1g-dev:${{ matrix.os-arch }}
      # - name: Prepare libelf and zlib
      #   run: 3rdparty/prepare-native-dependencies.sh ${{ matrix.arch }}
      - name: Publish to crates.io
        if: matrix.os == 'ubuntu-22.04' && matrix.target == 'x86_64-unknown-linux-gnu'
        continue-on-error: true
        uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Generate third-party licenses
        run: cargo about generate -o THIRD_PARTY_LICENSES.HTML about.hbs
      - uses: taiki-e/upload-rust-binary-action@v1
        # env:
        #   LIBBPF_SYS_LIBRARY_PATH: ${{ github.workspace }}/3rdparty/${{ matrix.arch }}/${{ matrix.libpath }}
        #   LIBBPF_SYS_EXTRA_CFLAGS: -I ${{ github.workspace }}/3rdparty/${{ matrix.arch }}/usr/include
        with:
          bin: tracexec
          token: ${{ secrets.GITHUB_TOKEN }}
          target: ${{ matrix.target }}
          no-default-features: ${{ matrix.no-default-features }}
          features: ${{ matrix.features }}
          include: THIRD_PARTY_LICENSES.HTML,LICENSE
